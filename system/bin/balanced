#!/system/bin/sh

write() {
  # Bail out if file does not exist
  if [[ ! -f "$1" ]]; then
    echo "$1 doesn't exist, skipping..."
    return 0
	fi

  # Fetch the current key value
  local curval=$(cat "$1" 2> /dev/null)
	
  # Bail out if value is already set
  if [[ "$curval" == "$2" ]]; then
    echo "$1 is already set to $2, skipping..."
	return 1
  fi

  # Make file writable in case it is not already
  chmod +w "$1" 2> /dev/null

  # Write the new value and bail if there's an error
   if ! echo "$2" > "$1" 2> /dev/null
   then
     echo "[!] Failed: $1 -> $2"
	 return 0
   fi

  # Log the success
  echo "$1 $curval -> $2"
}

balanced() {
SCHED_PERIOD_LATENCY="$((1 * 1000 * 1000))"

SCHED_PERIOD_BALANCE="$((4 * 1000 * 1000))"

SCHED_PERIOD_BATTERY="$((8 * 1000 * 1000))"

SCHED_PERIOD_THROUGHPUT="$((10 * 1000 * 1000))"

SCHED_TASKS_LATENCY="10"

SCHED_TASKS_BATTERY="4"

SCHED_TASKS_BALANCE="8"

SCHED_TASKS_THROUGHPUT="6"

# Maximum unsigned integer size in C
UINT_MAX="4294967295"

# Variable to GPU directories
for gpul in /sys/devices/soc/*.qcom,kgsl-3d0/kgsl/kgsl-3d0
do
  if [ -d "$gpul" ]; then
    gpu=$gpul
  fi
done

for gpul1 in /sys/devices/soc.0/*.qcom,kgsl-3d0/kgsl/kgsl-3d0
do
  if [ -d "$gpul1" ]; then
    gpu=$gpul1
  fi
done

for gpul2 in /sys/devices/*.mali
do
  if [ -d "$gpul2" ]; then
    gpu=$gpul2
  fi
done

for gpul3 in /sys/devices/platform/*.gpu
do
  if [ -d "$gpul3" ]; then
    gpu=$gpul3
  fi
done
        
for gpul4 in /sys/devices/platform/mali-*.0
do
  if [ -d "$gpul4" ]; then
    gpu=$gpul4
  fi
done

if [ -d "/sys/class/kgsl/kgsl-3d0" ]; then
  gpu="/sys/class/kgsl/kgsl-3d0"
elif [ -d "/sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0" ]; then
  gpu="/sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0"
elif [ -d "/sys/devices/platform/gpusysfs" ]; then
  gpu="/sys/devices/platform/gpusysfs"
elif [ -d "/sys/devices/platform/mali.0" ]; then
  gpu="/sys/devices/platform/mali.0"
fi

for gpul in /sys/devices/soc/*.qcom,kgsl-3d0/kgsl/kgsl-3d0/devfreq
do
  if [ -d "$gpul" ]; then
    gpug=$gpul
  fi
done

for gpul1 in /sys/devices/soc.0/*.qcom,kgsl-3d0/kgsl/kgsl-3d0/devfreq
do
  if [ -d "$gpul1" ]; then
    gpug=$gpul1
  fi
done

for gpul2 in /sys/devices/platform/*.gpu
do
  if [ -d "$gpul2" ]; then
    gpug=$gpul2
  fi
done

if [ -d "/sys/class/kgsl/kgsl-3d0/devfreq" ]; then
  gpug="/sys/class/kgsl/kgsl-3d0/devfreq"
elif [ -d "/sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/devfreq" ]; then
  gpug="/sys/devices/platform/kgsl-3d0.0/kgsl/kgsl-3d0/devfreq"
elif [ -d "/sys/devices/platform/gpusysfs" ]; then
  gpug="/sys/devices/platform/gpusysfs"
elif [ -d "/sys/module/mali/parameters" ]; then
  gpug="/sys/module/mali/parameters"		
elif [ -d "/sys/kernel/gpu" ]; then
  gpug="/sys/kernel/gpu"
fi
	
for gpul in /sys/devices/soc/*.qcom,kgsl-3d0/kgsl/kgsl-3d0
do
  if [ -d "$gpul" ]; then
    gpum=$gpul
  fi
done

for gpul1 in /sys/devices/soc.0/*.qcom,kgsl-3d0/kgsl/kgsl-3d0
do
  if [ -d "$gpul1" ]; then
    gpum=$gpul1
  fi
done

if [ -d "/sys/class/kgsl/kgsl-3d0" ]; then
  gpum="/sys/class/kgsl/kgsl-3d0"
elif [ -d "/sys/kernel/gpu" ]; then
  gpum="/sys/kernel/gpu"
fi

# Variable to GPU model
if [[ -e $gpum/gpu_model ]]; then
  GPU_MODEL=$(cat "$gpum"/gpu_model | awk '{print $1}')
fi
if [[ -e $gpug/gpu_governor ]]; then
  GPU_GOVERNOR=$(cat "$gpug"/gpu_governor)
elif [[ -e $gpug/governor ]]; then
  GPU_GOVERNOR=$(cat "$gpug"/governor)
fi

if [[ -e $gpu/min_pwrlevel ]]; then
  gpuminpl=$(cat "$gpu"/min_pwrlevel)
  gpupl=$((gpuminpl + 1))
fi

gpumx=$(cat "$gpu"/devfreq/available_frequencies | awk -v var="$gpupl" '{print $var}')

if [[ $gpumx != $(cat "$gpu"/max_gpuclk) ]]; then
  gpumx=$(cat "$gpu"/devfreq/available_frequencies | awk '{print $1}')
fi

for cpu in /sys/devices/system/cpu/cpu*/cpufreq/
do
  CPU_GOVERNOR=$(cat "$cpu"/scaling_governor)
done
for cpu in /sys/devices/system/cpu/cpu*/cpufreq
do
  cpumxfreq=$(cat "$cpu"/scaling_max_freq)
  cpumxfreq2=$(cat "$cpu"/cpuinfo_max_freq)

  if [[ $cpumxfreq2 > $cpumxfreq ]]; then
    cpumxfreq=$cpumxfreq2
  fi
done

cpumfreq=$((cpumxfreq / 2))

gpufreq=$(cat "$gpu"/max_gpuclk)

gpumfreq=$((gpufreq / 2))
  
  # Enable perfd and mp decision
  start perfd
  start mpdecision

renice -n -5 $(pgrep system_server)
  renice -n -5 $(pgrep com.miui.home)
  renice -n -5 $(pgrep launcher)
  renice -n -5 $(pgrep lawnchair)
  renice -n -5 $(pgrep home)
  renice -n -5 $(pgrep watchapp)
  renice -n -5 $(pgrep trebuchet)
  renice -n -1 $(pgrep dialer)
  renice -n -1 $(pgrep keyboard)
  renice -n -1 $(pgrep inputmethod)
  renice -n -9 $(pgrep fluid)
  renice -n -10 $(pgrep composer)
  renice -n -1 $(pgrep com.android.phone)
  renice -n -10 $(pgrep surfaceflinger)
  renice -n 1 $(pgrep kswapd0)
  renice -n 1 $(pgrep ksmd)
  renice -n -6 $(pgrep msm_irqbalance)
  renice -n -9 $(pgrep kgsl_worker)
  renice -n 6 $(pgrep android.gms)
  
  
  echo "[*] ENABLED MPDECISION AND PERFD "
  
  
  # Disable logd and statsd to reduce overhead.
  stop logd
  stop statsd
  
  
  echo "[*] DISABLED STATSD AND LOGD. "
  
  
  if [[ -e "/sys/module/cpu_boost/parameters/dynamic_stune_boost" ]]; then
  	write "/sys/module/cpu_boost/parameters/dynamic_stune_boost" "10"
  	
  	echo "[*] TWEAKED STUNE BOOST."
  	
  fi
  
  for corectl in /sys/devices/system/cpu/cpu*/core_ctl
  do
  	if [[ -e "${corectl}/enable" ]]; then
  		write "${corectl}/enable" "1"
      elif [[ -e "${corectl}/disable" ]]; then
  	write "${corectl}/disable" "0"
  	fi
  done
  
  
  echo "[*] ENABLED CORE CONTROL. "
  
  
  # I/O Scheduler Tweaks.
  for queue in /sys/block/*/queue/
  do
  	write "${queue}add_random" 0
  	write "${queue}iostats" 0
  	write "${queue}read_ahead_kb" 128
  	write "${queue}nomerges" 2
  	write "${queue}rq_affinity" 1
  	write "${queue}nr_requests" 64
  done
  
  
  echo "[*] TWEAKED I/O SCHEDULER."
  
  
  # CPU Tweaks
  for cpu in /sys/devices/system/cpu/cpu*/cpufreq/
  do
  	avail_govs=$(cat "${cpu}scaling_available_governors")
  	if [[ "$avail_govs" == *"schedutil"* ]]; then
  		write "${cpu}scaling_governor" schedutil
  		write "${cpu}schedutil/up_rate_limit_us" "$((SCHED_PERIOD_BALANCE / 1000))"
  		write "${cpu}schedutil/down_rate_limit_us" "$((4 * SCHED_PERIOD_BALANCE / 1000))"
  		write "${cpu}schedutil/pl" "0"
  		write "${cpu}schedutil/iowait_boost_enable" "0"
  		write "${cpu}schedutil/rate_limit_us" "$((4 * SCHED_PERIOD_BALANCE / 1000))"
  		write "${cpu}schedutil/hispeed_load" "89"
  		write "${cpu}schedutil/hispeed_freq" "$cpumxfreq"
  	elif [[ "$avail_govs" == *"interactive"* ]]; then
  		write "${cpu}scaling_governor" interactive
  		write "${cpu}interactive/timer_rate" "40000"
  		write "${cpu}interactive/boost" "0"
  		write "${cpu}interactive/timer_slack" "40000"
  		write "${cpu}interactive/use_migration_notif" "1" 
  		write "${cpu}interactive/ignore_hispeed_on_notif" "1"
  		write "${cpu}interactive/use_sched_load" "1"
  		write "${cpu}interactive/boostpulse" "0"
  		write "${cpu}interactive/fastlane" "1"
  		write "${cpu}interactive/fast_ramp_down" "0"
  		write "${cpu}interactive/sampling_rate" "40000"
  		write "${cpu}interactive/sampling_rate_min" "50000"
  		write "${cpu}interactive/min_sample_time" "50000"
  		write "${cpu}interactive/go_hispeed_load" "89"
  		write "${cpu}interactive/hispeed_freq" "$cpumxfreq"
  	fi
  done
  
  for cpu in /sys/devices/system/cpu/cpu*
  do
  	write "$cpu/online" "1"
  done
  
  
  echo "[*] TWEAKED CPU "
  
  
  # GPU Tweaks.
  write "$gpu/throttling" "1"
  write "$gpu/thermal_pwrlevel" "0"
  write "$gpu/devfreq/adrenoboost" "0"
  write "$gpu/force_no_nap" "0"
  write "$gpu/bus_split" "1"
  write "$gpu/devfreq/max_freq" $(cat "$gpu"/max_gpuclk)
  write "$gpu/devfreq/min_freq" "100000000"
  write "$gpu/default_pwrlevel" "$gpuminpl"
  write "$gpu/force_bus_on" "0"
  write "$gpu/force_clk_on" "0"
  write "$gpu/force_rail_on" "0"
  write "$gpu/idle_timer" "96"
  
  if [[ -e "/proc/gpufreq/gpufreq_limited_thermal_ignore" ]]; then
  	write "/proc/gpufreq/gpufreq_limited_thermal_ignore" "0"
  fi
  
# Enable dvfs
  if [[ -e "/proc/mali/dvfs_enable" ]];then
  	write "/proc/mali/dvfs_enable" "1"
  fi
  
  if [[ -e "/sys/module/pvrsrvkm/parameters/gpu_dvfs_enable" ]];then
  	write "/sys/module/pvrsrvkm/parameters/gpu_dvfs_enable" "1"
  fi
  
  if [[ -e "/sys/module/simple_gpu_algorithm/parameters/simple_gpu_activate" ]]; then
  	write "/sys/module/simple_gpu_algorithm/parameters/simple_gpu_activate" "1"
  fi
  
  
  echo "[*] TWEAKED GPU "
  
  	
  # Enable and tweak adreno idler
  if [[ -d "/sys/module/adreno_idler" ]]; then
  	write "/sys/module/adreno_idler/parameters/adreno_idler_active" "Y"
  	write "/sys/module/adreno_idler/parameters/adreno_idler_idleworkload" "6000"
  	write "/sys/module/adreno_idler/parameters/adreno_idler_downdifferential" "25"
  	write "/sys/module/adreno_idler/parameters/adreno_idler_idlewait" "25"
  	
  	echo "[*] ENABLED AND TWEAKED ADRENO IDLER... "
  	
  fi
  
  # Schedtune Tweaks
  if [[ -d "/dev/stune/" ]]; then
  	write "/dev/stune/background/schedtune.boost" "0"
  	write "/dev/stune/background/schedtune.prefer_idle" "0"
  	write "/dev/stune/foreground/schedtune.boost" "0"
  	write "/dev/stune/foreground/schedtune.prefer_idle" "1"
  	write "/dev/stune/rt/schedtune.boost" "0"
  	write "/dev/stune/rt/schedtune.prefer_idle" "0"
  	write "/dev/stune/top-app/schedtune.boost" "10"
  	write "/dev/stune/top-app/schedtune.prefer_idle" "1"
  	write "/dev/stune/schedtune.boost" "0"
  	write "/dev/stune/schedtune.prefer_idle" "0"
  	
  	echo "[*] APPLIED SCHEDTUNE TWEAKS. "
  	
  fi
  
  # FS tweaks.
  if [[ -d "/proc/sys/fs" ]]; then
  	write "/proc/sys/fs/dir-notify-enable" "0"
  	write "/proc/sys/fs/lease-break-time" "20"
  	write "/proc/sys/fs/leases-enable" "1"
  	
  	echo "[*] APPLIED FS TWEAKS "
  	
  fi
  
  # Enable dynamic_fsync.
  if [[ -e "/sys/kernel/dyn_fsync/Dyn_fsync_active" ]]; then
  	write "/sys/kernel/dyn_fsync/Dyn_fsync_active" "1"
  	
  	echo "[*] ENABLED DYNAMIC FSYNC."
  	
  fi
  
  # Scheduler features
  if [[ -e "/sys/kernel/debug/sched_features" ]]; then
  	write "/sys/kernel/debug/sched_features" "NEXT_BUDDY"
  	write "/sys/kernel/debug/sched_features" "TTWU_QUEUE"
  	write "/sys/kernel/debug/sched_features" "NO_GENTLE_FAIR_SLEEPERS"
  	write "/sys/kernel/debug/sched_features" "WAKEUP_PREEMPTION"
  fi
  
  
  echo "[*] APPLIED SCHEDULER FEATURES. "
  
  
  # OP Chain disable.
  if [[ -d "/sys/module/opchain" ]]; then
  	write "/sys/module/opchain/parameters/chain_on" "0"
  	
  	echo "[*] DISABLED ONEPLUS CHAIN. "
  	
  fi
  
  # Tweak some kernel settings to improve overall performance.
  write "/proc/sys/kernel/sched_child_runs_first_nosys" "0"
  write "/proc/sys/kernel/sched_boost" "0"
  write "/proc/sys/kernel/perf_cpu_time_max_percent" "15"
  write "/proc/sys/kernel/sched_autogroup_enabled" "1"
  write "/proc/sys/kernel/random/read_wakeup_threshold" "64"
  write "/proc/sys/kernel/random/write_wakeup_threshold" "256"
  write "/proc/sys/kernel/random/urandom_min_reseed_secs" "90"
  write "/proc/sys/kernel/sched_tunable_scaling" "0"
  write "/proc/sys/kernel/sched_latency_ns" "$SCHED_PERIOD_BALANCE"
  write "/proc/sys/kernel/sched_min_granularity_ns" "$((SCHED_PERIOD_BALANCE / SCHED_TASKS_BALANCE))"
  write "/proc/sys/kernel/sched_wakeup_granularity_ns" "$((SCHED_PERIOD_BALANCE / 2))"
  write "/proc/sys/kernel/sched_migration_cost_ns" "5000000"
  write "/proc/sys/kernel/sched_min_task_util_for_colocation" "0"
  write "/proc/sys/kernel/sched_nr_migrate" "32"
  write "/proc/sys/kernel/sched_schedstats" "0"
  write "/proc/sys/kernel/sched_sync_hint_enable" "0"
  write "/proc/sys/kernel/sched_user_hint" "0"
  write "/proc/sys/kernel/printk_devkmsg" "off"
  
  
  echo "[*] TWEAKED KERNEL SETTINGS. "
  
  
  # Enable fingerprint boost.
  if [[ -e "/sys/kernel/fp_boost/enabled" ]]; then
  	write "/sys/kernel/fp_boost/enabled" "1"
  	
  	echo "[*] ENABLED FINGERPRINT BOOST. "
  	
  fi
  
  # Set min and max clocks.
  for minclk in /sys/devices/system/cpu/cpufreq/policy*/
  do
  	if [[ -e "${minclk}scaling_min_freq" ]]; then
  		write "${minclk}scaling_min_freq" "100000"
  		write "${minclk}scaling_max_freq" "$cpumxfreq"
  	fi
  done
  
  for mnclk in /sys/devices/system/cpu/cpu*/cpufreq/
  do
  	if [[ -e "${mnclk}scaling_min_freq" ]]; then
  		write "${mnclk}scaling_min_freq" "100000"
  		write "${mnclk}scaling_max_freq" "$cpumxfreq"
  	fi
  done
  
  
  echo "[*] SET MIN AND MAX CPU CLOCKS. "
  
  
  if [[ -e "/sys/devices/system/cpu/cpuidle/use_deepest_state" ]]; then
  	write "/sys/devices/system/cpu/cpuidle/use_deepest_state" "1"
  	
  	echo "[*] ALLOWED CPUIDLE TO USE DEEPEST STATE. "
  	
  fi
  
  # Disable krait voltage boost
  if [[ -e "/sys/module/acpuclock_krait/parameters/boost" ]]; then
  	write "/sys/module/acpuclock_krait/parameters/boost" "N"
  	
  	echo "[*] DISABLED KRAIT VOLTAGE BOOST. "
  	
  fi
  
  sync
  
  # VM settings to improve overall user experience and smoothness.
  write "/proc/sys/vm/drop_caches" "3"
  write "/proc/sys/vm/dirty_background_ratio" "10"
  write "/proc/sys/vm/dirty_ratio" "30"
  write "/proc/sys/vm/dirty_expire_centisecs" "1000"
  write "/proc/sys/vm/dirty_writeback_centisecs" "3000"
  write "/proc/sys/vm/page-cluster" "0"
  write "/proc/sys/vm/stat_interval" "60"
  write "/proc/sys/vm/swappiness" "100"
  write "/proc/sys/vm/laptop_mode" "0"
  write "/proc/sys/vm/vfs_cache_pressure" "50"
  
  
  echo "[*] APPLIED VM TWEAKS."
  
  
  # MSM thermal tweaks
  if [[ -d "/sys/module/msm_thermal" ]]; then
  	write /sys/module/msm_thermal/vdd_restriction/enabled "0"
  	write /sys/module/msm_thermal/core_control/enabled "1"
  	write /sys/module/msm_thermal/parameters/enabled "Y"
  	
  	echo "[*] APPLIED THERMAL TWEAKS. "
  	
  fi
  
  # Enable power efficient workqueue.
  if [[ -e "/sys/module/workqueue/parameters/power_efficient" ]]; then
  	write "/sys/module/workqueue/parameters/power_efficient" "Y"
  	
  	echo "[*] ENABLED POWER EFFICIENT WORKQUEUE. "
  	
  fi
  
  if [[ -e "/sys/devices/system/cpu/sched_mc_power_savings" ]]; then
  	write "/sys/devices/system/cpu/sched_mc_power_savings" "1"
  	
  	echo "[*] ENABLED MULTICORE POWER SAVINGS. "
  	
  fi
  
  # Fix DT2W.
  if [[ -e "/sys/touchpanel/double_tap" && -e "/proc/tp_gesture" ]]; then
  	write "/sys/touchpanel/double_tap" "1"
  	write "/proc/tp_gesture" "1"
  	
  	echo "[*] FIXED DOUBLE TAP TO WAKEUP IF BROKEN. "
  	
  elif [[ -e "/proc/tp_gesture" ]]; then
  	write "/proc/tp_gesture" "1"
  	
  	echo "[*] FIXED DOUBLE TAP TO WAKEUP IF BROKEN. "
  	
  elif [[ -e "/sys/touchpanel/double_tap" ]]; then
  	write "/sys/touchpanel/double_tap" "1"
  	
  	echo "[*] FIXED DOUBLE TAP TO WAKEUP IF BROKEN. "
  	
  fi
  
  # Disable touch boost on balance and battery profile.
  if [[ -e /sys/module/msm_performance/parameters/touchboost ]]; then
  	write "/sys/module/msm_performance/parameters/touchboost" "0"
  	
  	echo "[*] DISABLED TOUCH BOOST. "
  	
  elif [[ -e /sys/power/pnpmgr/touch_boost ]]; then
  	write "/sys/power/pnpmgr/touch_boost" "0"
  	
  	echo "[*] DISABLED TOUCH BOOST. "
  	
  fi
  
  
  # Enable KSM
  if [[ -e "/sys/kernel/mm/ksm/run" ]]; then
  	write "/sys/kernel/mm/ksm/run" "1"
  	
  	echo "[*] ENABLED KSM."
  	
  # Enable UKSM
  elif [[ -e "/sys/kernel/mm/uksm/run" ]]; then
  	write "/sys/kernel/mm/uksm/run" "1"
  	
  	echo "[*] ENABLED UKSM."
  	
  fi
  
  if [[ -e "/sys/module/pm2/parameters/idle_sleep_mode" ]]; then
  	write "/sys/module/pm2/parameters/idle_sleep_mode" "Y"
  	
  	echo "[*] ENABLED PM2 IDLE SLEEP MODE. "
  	
  fi
  
  if [[ -e "/sys/class/lcd/panel/power_reduce" ]]; then
  	write "/sys/class/lcd/panel/power_reduce" "0"
  	
  	echo "[*] DISABLED LCD POWER REDUCE. "
  	
  fi
  
  if [[ -e "/sys/kernel/sched/gentle_fair_sleepers" ]]; then
  	write "/sys/kernel/sched/gentle_fair_sleepers" "1"
  	
  	echo "[*] ENABLED GENTLE FAIR SLEEPERS. "
  	
  fi
}

balanced 2> /dev/null